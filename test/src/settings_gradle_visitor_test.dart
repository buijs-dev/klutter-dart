// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import 'dart:io';

import 'package:test/test.dart';
import 'package:klutter/src/klutter_exception.dart';
import 'package:klutter/src/settings_gradle_visitor.dart';

/// [Author] Gillian Buijs.
void main() {

  final s = Platform.pathSeparator;
  final String root = Directory.systemTemp.absolute.path;

  test('Verify exception is thrown if root/android does not exist', () {
    expect(() => applyPluginLoader("fake"), throwsA(predicate((e) =>
    e is KlutterException &&
        e.cause.startsWith("Path does not exist:") &&
        e.cause.endsWith("/fake"))));
  });

  test('Verify exception is thrown if root/android/settings.gradle does not exist', () {
    expect(() => applyPluginLoader(root), throwsA(predicate((e) =>
        e is KlutterException &&
        e.cause == "Missing settings.gradle file in directory: $root")));
  });

  test('Verify exception is thrown if settings.gradle misses app_plugin_loader', () {
    // Given an empty settings.gradle file
    final android = Directory("$root${s}sgv1${s}android");
    File("${android.absolute.path}${s}settings.gradle").createSync(recursive: true);

    // An exception is thrown
    expect(() => applyPluginLoader(android.path), throwsA(predicate((e) =>
    e is KlutterException &&
        e.cause == '''Failed to apply Klutter plugin loader.
             Check if the root/android/settings.gradle file contains the following line:
             'apply from: "\$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"'
             
             Either add the line and retry or manually add the following line:
             'apply from: "\$flutterSdkPath/packages/flutter_tools/gradle/klutter_plugin_loader.gradle.kts"'
          ''')));
  });

  test('Verify line is added to standard Flutter settings.gradle file', () {

    final android = Directory("$root${s}sgv2${s}android");
    final settingsGradle = File("${android.absolute.path}${s}settings.gradle")
      ..createSync(recursive: true);

    // Given a default settings.gradle file as generated by Flutter.
    settingsGradle.writeAsStringSync(
      '''include ':app'

        def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
        def properties = new Properties()
        
        assert localPropertiesFile.exists()
        localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
        
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        
        apply from: "\$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
    ''');

    // When the visitor has done it's magic.
    applyPluginLoader(android.path);

    // Then a new line applying the klutter_plugin_loader.gradle.kts is added.
    expect(settingsGradle.readAsStringSync().replaceAll(" ", ""),
        '''include ':app'

        def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
        def properties = new Properties()
        
        assert localPropertiesFile.exists()
        localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
        
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        
        apply from: "\$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
        apply from: "\$flutterSdkPath/packages/flutter_tools/gradle/klutter_plugin_loader.gradle.kts"
    '''.replaceAll(" ", ""));

  });

  test('Verify line is added to customized settings.gradle file', () {

    final android = Directory("$root${s}sgv3${s}android");
    final settingsGradle = File("${android.absolute.path}${s}settings.gradle")
      ..createSync(recursive: true);

    // Given a default settings.gradle file as generated by Flutter.
    settingsGradle.writeAsStringSync(
        '''include ':app'
           apply from: 'Users/foo/some/bar/folder/packages/flutter_tools/gradle/app_plugin_loader.gradle'
        ''');

    // When the visitor has done it's magic.
    applyPluginLoader(android.path);

    // Then a new line applying the klutter_plugin_loader.gradle.kts is added.
    expect(settingsGradle.readAsStringSync().replaceAll(" ", ""),
        '''include ':app'
           apply from: 'Users/foo/some/bar/folder/packages/flutter_tools/gradle/app_plugin_loader.gradle'
           apply from: 'Users/foo/some/bar/folder/packages/flutter_tools/gradle/klutter_plugin_loader.gradle.kts'
        '''.replaceAll(" ", ""));

  });

}